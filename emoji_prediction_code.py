# -*- coding: utf-8 -*-
"""Emoji_Prediction_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MgnminRQQ74rlczUfUw7Qqn30T7tGXEG
"""

import numpy as np
import pandas as pd

import warnings

# Ignore all warnings
warnings.filterwarnings('ignore')

"""# **Loading The Dataset**"""

train = pd.read_csv(r'cleaned_train_emoji.csv')
train.head()

test = pd.read_csv(r'cleaned_test_emoji.csv')
test.head()

"""# **Emoji's**"""

import emoji

print(type(emoji.EMOJI_DATA))
list(emoji.EMOJI_DATA.keys())[:10]

emoji.EMOJI_DATA

emoji.emojize(':crown:', language = 'en')

emoji.emojize(':books:', language = 'en')

emoji_dict = {
    0: ':beating_heart:',
    1: ':baseball:',
    2: ':face_with_tears_of_joy:',
    3: ':face_with_head-bandage:',
    4: ':bread:'
}

for e in emoji_dict.values():
  print(emoji.emojize(e,), end = " ")

"""# **Text PreProcessing**"""

X_train = train['Text']
X_train[:10]

Y_train = train['Label']
Y_train[:10]

X_train.shape, Y_train.shape

"""# **Get Embeddings**"""

f = open('glove.6B.50d.txt', encoding = 'utf8', mode = 'r')

embedding_matrix = {}
for line in f:
    values = line.split()
    word = values[0]
    emb = np.array(values[1:], dtype = 'float')
    embedding_matrix[word] = emb

embedding_matrix['the'].shape

def get_embedding_matrix_for_data(data):
    maxLen = 10
    embedding_data = np.zeros((len(data), maxLen, 50))

    for ix in range(data.shape[0]):
        words_in_sentence = data[ix].split()

        for jx in range(len(words_in_sentence)):
            if embedding_matrix.get(words_in_sentence[jx].lower()) is not None:
                embedding_data[ix][jx] = embedding_matrix[words_in_sentence[jx].lower()]
    return embedding_data

X_train = get_embedding_matrix_for_data(X_train)
X_train.shape

from keras.utils import to_categorical

Y_train = to_categorical(Y_train)
Y_train.shape

"""# **Model Building**"""

from keras.models import Sequential
from keras.layers import Input, Dense, LSTM, Dropout

# Define the model
model = Sequential()

# Add an Input layer as the first layer
model.add(Input(shape=(10, 50)))

# Add LSTM and other layers
model.add(LSTM(units=64, return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(units=32))
model.add(Dropout(0.2))

model.add(Dense(units=10, activation='relu'))
model.add(Dense(units=5, activation='softmax'))

# Print the model summary
model.summary()

# Comiling the model

model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

# Training the Model

model.fit(X_train, Y_train, validation_split = 0.1, batch_size = 32, epochs = 50)

# Training data Model Accuracy

round(model.evaluate(X_train, Y_train)[1]*100, 2)

# PreProcessing Test data

test['Text'] = test['Text'].apply(lambda x: x[:-1])

X_test = test['Text']
X_test[:10]

Y_test = test['Label']
Y_test[:10]

X_test.shape, Y_test.shape

X_test = get_embedding_matrix_for_data(X_test)
X_test.shape

Y_test = to_categorical(Y_test)
Y_test.shape

# Testing data Model accuracy

round(model.evaluate(X_test, Y_test)[1]*100, 2)

Y_pred = model.predict(X_test)
Y_pred = (Y_pred > 0.5).astype(int)
print(Y_pred[:10])

from sklearn.metrics import confusion_matrix, classification_report, accuracy_score

# Convert multilabel-indicator to multiclass
Y_pred_classes = np.argmax(Y_pred, axis=1)
Y_test_classes = np.argmax(Y_test, axis=1)

print("Confusion Matrix:")
print(confusion_matrix(Y_test_classes, Y_pred_classes))

print("Classification Report:")
print(classification_report(Y_test_classes, Y_pred_classes))

print("Accuracy Score:", round(accuracy_score(Y_test_classes, Y_pred_classes)*100,2),'%')

# Predicting Result for test data

for t in range(len(test)):
    print("Message: ",test['Text'].iloc[t])

    # Assuming 'Label' is the name of the column containing the emoji labels
    print("Actual: ",emoji.emojize(emoji_dict[test['Label'].iloc[t]]))

    # Find the index where the prediction is 1
    predicted_index = np.argmax(Y_pred[t])

    print("Predicted: ",emoji.emojize(emoji_dict[predicted_index])) # Use predicted index to access emoji_dict
    print()